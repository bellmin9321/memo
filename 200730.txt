Library vs Framework

1. Library
내가 만들고자 하는 프로그램에 필요한 어떤 부품이 되는 소프트웨어들을 잘 정리정돈해놓은 재사용하기 쉽도록 되어있는 소프트웨어

내가 만들고있는 프로그램에서 사용하는 부품을 가져오는 것

2. Framework
만들고자 하는 것이 있을 때, 그것이 무엇이냐에 따라(게임, web, 채팅 등) 

---------------------------------------------------------------------
UI vs API

1. UI(User Interface)
사용자가 시스템을 제어하기 위해서 사용하는 조작장치( ex : button)
우리의 웹, 앱을 이용하는 사용자가 버튼과 같은 조작장치를 이용해서 우리의 웹, 애플리케이션을 사용하고 있음

2. API(Application Programming Interface)
애플리케이션을 만들기 위해서 프로그래밍을 할 때 사용되는 조작장치
(ex : alert 함수)

---------------------------------------------------------------------
웹 페이지에 잇는 어떤 태그를 삭제하고 싶거나 자식태그를 추가하고 싶다면

Document 객체 사용 > DOM(Document Object Model) 객체 > window 객체
ajax(웹페이지를 reload하지않고고 정보만 변경하고 싶다면) 
cookie(웹페이지가 reload돼도 현재 상태를 유지하고싶다면)
offline web application(인터넷이 끊겨도 동작하는 웹페이지를 만들고 싶다면)
webRTC(화상통신 웹 앱을 만들고 싶다면)
speech(사용자의 음성을 인식하고 음성으로 정보를 전달하고 싶다면)
webGL(3차원 그래픽으로 게임같은걸 만들고 싶으면)
webVR(가상현실)

---------------------------------------------------------------------
Synchronous(동기적) vs asynchronous(비동기적)

1. Synchronous(동기적)
일이 처리되면서 그 일이 오랫동안 처리되어야하는 경우에도 기다렸다 처리하는 것


2. asynchronous(비동기적)
병렬적으로 동시에 여러가지를 처리하는 것 -> 효율적이지만 복잡함

---------------------------------------------------------------------
Callback 함수

var a = function(){ // javascript에선 함수가 값이다
    console.log('A');
}  // 변수 a 뒤에 함수를 호출하는 기호를 넣는 것을 통해서 a라는 변수가 담고있는 값인 함수를 실행할 수 있음

function slowfunc(callback){ // callback이라는 parameter는 변수 a의 함수값을 받음
    callback(); // 요게 바로 callback 함수 
}
/*
function slowfunc(call){ 인자 call이랑  밑에 callback함수인 call은 어떤걸로 바꿔도 상관없음
    call();
}
*/

slowfunc(a);

---------------------------------------------------------------------
Package Manager > 소프트웨어들을 관리(생성, 설치, 업데이트, 삭제 등)
<NPM - pm2>
설치 : npm install pm2 -webGL
시작 : pm2 start main.js
실행중인 pm2 보기 : pm2 monit
list 보기 : pm2 list
자동 변경 : pm2 start main.js --watch
문제점 확인 : pm2 log